Q.1) Create a report for overall distribution of duration of trending videos by each country. The report will have video_id, video name (title), country, No_of_days_trended.

Question: How many videos have trended for more than 5 days in the US 
SELECT country,
       Count(video_id) AS no_of_videos
FROM   (SELECT video_id,
               title,
               country,
               Count(trending_date) AS no_of_days_trended
        FROM   yt_trending_videos
        GROUP  BYvideo_id,
                  title,
                  country) a
WHERE  no_of_days_trended > 5
       AND country = 'US'
GROUP  BY country


Q.2) Create a report for overall distribution of duration of trending videos by each category. The report will have video_id, category title, No_of_days_trended.

Question: Which category has the highest average trending period?

SELECT snippettitle            AS category_title,
       Avg(no_of_days_trended) AS avg_trending_days
FROM   (SELECT video_id,
               title,
               snippettitle,
               Count(trending_date) AS no_of_days_trended
        FROM   yt_trending_videos a
               INNER JOIN yt_category_map b
                       ON a.category_id = b.id
        GROUP  BY video_id,
                  title,
                  snippettitle) a
GROUP  BY snippettitle
ORDER  BY avg_trending_days DESC 

Q.3) Create a report for the number of distinct videos trending from each category on day of the week. The report will have weekday, category title, No_videos_trended. 

Note: The answer cannot be derived from the report. In the report, we have a number of videos trending for each weekday by category. Hence, if a video has trended on multiple days, it will be counted on each day. The question asks for distinct videos and hence write the query considering that.

Question: How many distinct videos trended from the category ‘Music’ on weekdays (Monday - Friday)?

SELECT snippettitle,
 Count(DISTINCT video_id) AS no_of_videos
FROM   yt_trending_videos a
       INNER JOIN yt_category_map b
               ON a.category_id = b.id
WHERE  Weekday(trending_date) BETWEEN 0 AND 4
       AND snippettitle = 'Music'
GROUP  BY snippettitle

Q.4) Create a summary report which contains country, category title, total_views, total_likes and avg_trending_days. 
Question: What are the total views for category sports in ‘Canada’?
Answer
SELECT snippettitle AS category_title,
       country,
       Sum(total_views)  AS total_views,
       Sum(total_likes)  AS total_likes,
       Avg(no_of_days_trended) AS avg_trending_days
FROM   (SELECT video_id,
               title,
               snippettitle,
               country,
               Sum(views) AS total_views,
       	    Sum(likes) AS total_likes,
               Count(trending_date) AS no_of_days_trended
        FROM   yt_trending_videos a
               INNER JOIN yt_category_map b
                       ON a.category_id = b.id
        GROUP  BY video_id,
                  title,
                  snippettitle,
                  country ) c
WHERE  country = 'Canada'
       AND snippettitle = 'Sports'
GROUP  BY snippettitle,
          country
ORDER  BY country,
          avg_trending_days DESC

Q.5) Rank the videos based on views, likes within each country. Which country has the highest number of videos with rank for views and rank of likes both in top 20?
Answer: 
SELECT country,
       Count(video_id) AS no_of_videos
FROM   (SELECT video_id,
               title,
               country,
               views,
               likes,
               Rank()
                 OVER (
                   partition BY country
                   ORDER BY views DESC) AS rank_views,
               Rank()
                 OVER (
                   partition BY country
                   ORDER BY likes DESC) AS rank_likes
        FROM   yt_trending_videos) a
WHERE  rank_views <= 20
       AND rank_likes <= 20
GROUP  BY country
ORDER  BY no_of_videos DESC 

Q.6) Generate a report at video level with video viewership rating within the category. (Report at video level means the output should be unique at video_id).

Formula to assign the rating: ((Views - min(views))*100 ) / max(views) - min(views)

where max(views) is maximum views in the respective video’s category

and min(views) is minimum views in the respective video’s category

Question: What is the average rating of the category Music?

SELECT category_title,
       Avg(rating) AS avg_rating
FROM   (SELECT c.*,
               Round(( ( views - min_views ) * 100 ) / ( max_views - min_views )
               , 0) AS
                      rating
        FROM   (SELECT DISTINCT video_id,
                                title,
                                snippettitle                  AS category_title,
                                views,
                                Max(views)
                                  OVER (
                                    partition BY category_id) AS max_views,
                                Min(views)
                                  OVER (
                                    partition BY category_id) AS min_views
                FROM   yt_trending_videos a
                       INNER JOIN yt_category_map b
                               ON a.category_id = b.id) c) d
GROUP  BY category_title

Q.7) Generate a report at video level with video ratings. (Report at video level means the output should be unique at video_id).

Rating formula to assign the rating: ((Likes - min(likes))*100 ) / max(likes) - min(likes)

where max(likes) is maximum likes in the respective video’s category

and min(likes) is minimum likes in the respective video’s category

Question: Which category has the highest average rating based on likes?

SELECT category_title,
       Avg(rating) AS avg_rating
FROM   (SELECT c.*,
               Round(( ( likes - min_likes ) * 100 ) / ( max_likes - min_likes )
               , 0) AS
                      rating
        FROM   (SELECT DISTINCT video_id,
                                title,
                                snippettitle                  AS category_title,
                                likes,
                                Max(likes)
                                  OVER (
                                    partition BY category_id) AS max_likes,
                                Min(likes)
                                  OVER (
                                    partition BY category_id) AS min_likes
                FROM   yt_trending_videos a
                       INNER JOIN yt_category_map b
                               ON a.category_id = b.id) c) d
GROUP  BY category_title
ORDER  BY avg_rating DESC 